package io.kaoto.backend.api.service.step.parser.kamelet;

import io.kaoto.backend.api.metadata.catalog.StepCatalog;
import io.kaoto.backend.api.service.deployment.generator.kamelet.KameletBindingDeploymentGeneratorService;
import io.kaoto.backend.api.service.deployment.generator.kamelet.KameletConstructor;
import io.kaoto.backend.api.service.deployment.generator.kamelet.KameletRepresenter;
import io.kaoto.backend.model.deployment.kamelet.KameletBinding;
import io.kaoto.backend.model.step.Step;
import io.quarkus.test.junit.QuarkusTest;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.yaml.snakeyaml.Yaml;

import javax.inject.Inject;
import java.io.IOException;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;


@QuarkusTest
class KameletBindingStepParserServiceTest {

    private static String binding;

    @Inject
    private KameletBindingStepParserService service;

    @Inject
    private KameletBindingDeploymentGeneratorService deploymentService;

    private StepCatalog catalog;

    @Inject
    public void setStepCatalog(final StepCatalog catalog) {
        this.catalog = catalog;
    }

    @BeforeAll
    static void setup() throws URISyntaxException, IOException {
        binding = Files.readString(Path.of(
                KameletBindingStepParserServiceTest.class.getResource(
                                "twitter-search-source-binding.yaml")
                        .toURI()));
    }

    @BeforeEach
    void ensureCatalog() {
        catalog.waitForWarmUp().join();
    }

    @Test
    void parse() {
        List<Step> steps = service.deepParse(binding).getSteps();
        assertNotNull(steps);
        assertEquals(3, steps.size());

        Map<String, Object> md = new HashMap<>();
        md.put("name", "Kamelet Binding generated by Kaoto");

        Yaml yaml = new Yaml(new KameletConstructor(KameletBinding.class),
                new KameletRepresenter());
        KameletBinding res1 = yaml.load(binding);
        KameletBinding res2 = yaml.load(
                deploymentService.parse(steps, md, Collections.emptyList()));

        assertEquals(res1, res2);
    }

    @Test
    void parseKnative() throws URISyntaxException, IOException {
        final String binding = Files.readString(Path.of(
                KameletBindingStepParserServiceTest.class.getResource(
                                "knative-binding.yaml")
                        .toURI()));
        List<Step> steps = service.deepParse(binding).getSteps();
        assertNotNull(steps);
        assertEquals(2, steps.size());

        Map<String, Object> md = new HashMap<>();
        md.put("name", "Kamelet Binding generated by Kaoto");

        Yaml yaml = new Yaml(new KameletConstructor(KameletBinding.class),
                new KameletRepresenter());
        KameletBinding res1 = yaml.load(binding);
        KameletBinding res2 = yaml.load(
                deploymentService.parse(steps, md, Collections.emptyList()));

        assertEquals(res1, res2);
    }

    @Test
    void appliesTo() {
        assertTrue(service.appliesTo(binding));
        assertFalse(service.appliesTo("whatever"));
    }
}
